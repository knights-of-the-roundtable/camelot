service: camelot-sls-service 

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-python-requirements

package:
  exclude:
    - node_modules/**
    - .idea/**
    - .requirements/**
    - env/**
    - README.md
    - package.json
    - package-lock.json
    - requirements.txt

# DRY constants: define all compound/generated names in one place
# Override args are: .. defaults:
# --app_acroym          signed-uploader
# --s3_bucket           self:custom.app_acronym
# --s3_key_base         self:custom.stage
# --region              us-east-1
# --stage               dev 
# --deletion_policy     delete
custom:
  app_acronym: camelot_sls 
  default_stage: dev
  stage: ${opt:stage, self:custom.default_stage}
  stack_name: ${self:custom.app_acronym}-${self:custom.stage}
  region: ${opt:region, self:provider.region}
  deletion_policy: Delete
  # Put this here rather than in code (presigned URL TTL)
  url_default_ttl: 60
  pythonRequirements:
    dockerizePip: non-linux 
provider:
  name: aws
  runtime: python3.6
  region: us-west-2
  stage: ${opt:stage, self:custom.default_stage}
  environment:
    REGION: ${self:custom.region}
    URL_DEFAULT_TTL: ${self:custom.url_default_ttl}
    HOST: albion.cjxjfnu7ltml.us-west-2.rds.amazonaws.com
  vpc:
    securityGroupIds:
      - sg-a221c6e7
    subnetIds:
      - subnet-04a569ebd4d2ad04e
      - subnet-0c7f324b2c3d21176
      - subnet-0452167e39dd7a6d9
      - subnet-0cce522c2d914a4f0
functions:
  add_player:
    handler: add_player.lambda_handler
    name: ${self:custom.stack_name}-AddPlayer
    description: AddPlayer method
    events:
      - http:
          path: players
          method: post
          cors: true
          integration: lambda-proxy
  get_game:
    handler: get_game.lambda_handler
    name: ${self:custom.stack_name}-GetGame
    description: GetGame method
    events:
      - http:
          path: games/{gameId}
          method: get
          cors: true
          integration: lambda-proxy
  get_outcomes:
    handler: get_outcomes.lambda_handler
    name: ${self:custom.stack_name}-GetOutcomes
    description: GetOutcomes method
    events:
      - http:
          path: outcomes
          method: get
          cors: true
          integration: lambda-proxy
  get_players:
    handler: get_players.lambda_handler
    name: ${self:custom.stack_name}-GetPlayers
    description: GetPlayers method
    events:
      - http:
          path: players
          method: get
          cors: true
          integration: lambda-proxy
  get_roles:
    handler: get_roles.lambda_handler
    name: ${self:custom.stack_name}-GetRoles
    description: GetRoles method
    events:
      - http:
          path: roles
          method: get
          cors: true
          integration: lambda-proxy
  get_scores:
    handler: get_scores.lambda_handler
    name: ${self:custom.stack_name}-GetScores
    description: GetScores method
    events:
      - http:
          path: scores 
          method: get
          cors: true
          integration: lambda-proxy
  record_game:
    handler: record_game.lambda_handler
    name: ${self:custom.stack_name}-RecordGame
    description: RecordGame method
    events:
      - http:
          path: games
          method: post
          cors: true
          integration: lambda-proxy