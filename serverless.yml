service: camelot-sls-service 

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-python-requirements
  - serverless-api-gateway-throttling
  - serverless-pseudo-parameters
package:
  exclude:
    - node_modules/**
    - .idea/**
    - .requirements/**
    - env/**
    - README.md
    - package.json
    - package-lock.json
    - requirements.txt

# DRY constants: define all compound/generated names in one place
# Override args are: .. defaults:
# --app_acroym          signed-uploader
# --s3_bucket           self:custom.app_acronym
# --s3_key_base         self:custom.stage
# --region              us-west-2
# --stage               dev 
# --deletion_policy     delete
custom:
  app_acronym: camelot_sls 
  default_stage: dev
  stage: ${opt:stage, self:custom.default_stage}
  stack_name: ${self:custom.app_acronym}-${self:custom.stage}
  region: ${opt:region, self:provider.region}
  aurora:
    username: postgres
    cluster_identifier: albion-serverless
    cluster_arn: "arn:aws:rds:#{AWS::Region}:#{AWS::AccountId}:cluster:${self:custom.aurora.cluster_identifier}" # CF doesn't expose this, so need to recreate it
  pythonRequirements:
    dockerizePip: non-linux 
  apiGatewayThrottling:
    maxRequestsPerSecond: 10
    maxConcurrentRequests: 20

resources:
  Resources:
    auroraDbCredentials:
      Type: AWS::SecretsManager::Secret
      Properties:
        Description: 'Credentails for the Aurora DB'
        GenerateSecretString:
            SecretStringTemplate: '{"username": "${self:custom.aurora.username}"}'
            GenerateStringKey: 'password'
            ExcludeCharacters: '"@/\'
    auroraDb:
      Type: AWS::RDS::DBCluster
      Properties:
        DatabaseName: tintagel
        DBClusterIdentifier: ${self:custom.aurora.cluster_identifier}
        DBClusterParameterGroupName: default.aurora-postgresql10
        EnableHttpEndpoint: True
        Engine: aurora-postgresql
        EngineMode: serverless
        EngineVersion: '10.7'
        MasterUsername: ${self:custom.aurora.username}
        MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref auroraDbCredentials, ':SecretString:password}}' ]]
        ScalingConfiguration:
          AutoPause: True
          MaxCapacity: 2
          MinCapacity: 2
          SecondsUntilAutoPause: 7200 # 120 minutes
    lambdaRdsPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: 'IAM Policy to give lambdas access to RDS Data API'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'rds-data:BatchExecuteStatement'
                - 'rds-data:BeginTransaction'
                - 'rds-data:CommitTransaction'
                - 'rds-data:ExecuteStatement'
                - 'rds-data:RollbackTransaction'
              Resource: '*' # RDS Data API does not support resource-level permissions
              # Also need secrets manager access to read DB password
            - Effect: Allow
              Action:
                - 'secretsmanager:GetSecretValue'
              Resource:
                - !Ref auroraDbCredentials

provider:
  name: aws
  runtime: python3.6
  region: us-west-2
  stage: ${opt:stage, self:custom.default_stage}
  timeout: 25
  logs:
    restApi: true
  environment:
    REGION: ${self:custom.region}
    AURORA_CLUSTER_ARN: ${self:custom.aurora.cluster_arn}
    SECRET_ARN: !Ref auroraDbCredentials
  iamManagedPolicies: # Give policies to all lambdas
    - !Ref lambdaRdsPolicy

functions:
  add_player:
    handler: add_player.lambda_handler
    name: ${self:custom.stack_name}-AddPlayer
    description: AddPlayer method
    events:
      - http:
          path: players
          method: post
          cors: true
          integration: lambda-proxy
  get_game:
    handler: get_game.lambda_handler
    name: ${self:custom.stack_name}-GetGame
    description: GetGame method
    events:
      - http:
          path: games/{gameId}
          method: get
          cors: true
          integration: lambda-proxy
  get_outcomes:
    handler: get_outcomes.lambda_handler
    name: ${self:custom.stack_name}-GetOutcomes
    description: GetOutcomes method
    events:
      - http:
          path: outcomes
          method: get
          cors: true
          integration: lambda-proxy
  get_players:
    handler: get_players.lambda_handler
    name: ${self:custom.stack_name}-GetPlayers
    description: GetPlayers method
    events:
      - http:
          path: players
          method: get
          cors: true
          integration: lambda-proxy
  get_roles:
    handler: get_roles.lambda_handler
    name: ${self:custom.stack_name}-GetRoles
    description: GetRoles method
    events:
      - http:
          path: roles
          method: get
          cors: true
          integration: lambda-proxy
  get_scores:
    handler: get_scores.lambda_handler
    name: ${self:custom.stack_name}-GetScores
    description: GetScores method
    events:
      - http:
          path: scores 
          method: get
          cors: true
          integration: lambda-proxy
  record_game:
    handler: record_game.lambda_handler
    name: ${self:custom.stack_name}-RecordGame
    description: RecordGame method
    events:
      - http:
          path: games
          method: post
          cors: true
          integration: lambda-proxy
  delete_player:
    handler: delete_player.lambda_handler
    name: ${self:custom.stack_name}-DeletePlayer
    description: DeletePlayer method
  bootstrap:
    handler: bootstrap.lambda_handler
    name: ${self:custom.stack_name}-Bootstrap
    description: Bootstrap method
